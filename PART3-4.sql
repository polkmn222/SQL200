-- EXAM093
CREATE TABLE EMP01
(EMPNO      NUMBER(10),
 ENAME      VARCHAR2(10),
 SAL        NUMBER(10, 2),
 HIREDATE   DATE);
 
-- EXAM094
CREATE GLOBAL TEMPORARY TABLE EMP37
(EMPNO      NUMBER(10),
 ENAME      VARCHAR2(10),
 SAL        NUMBER(10))
 ON COMMIT DELETE ROWS;
 
-- EXAM095
CREATE VIEW EMP_VIEW
AS
SELECT EMPNO, ENAME, SAL, JOB, DEPTNO
    FROM EMP
    WHERE JOB = 'SALESMAN';
    
-- EXAM096
CREATE VIEW EMP_VIEW2
AS
SELECT DEPTNO, ROUND(AVG(SAL)) 평균월급
    FROM EMP
    GROUP BY DEPTNO;
    
-- EXAM097
CREATE INDEX EMP_SAL
    ON EMP(SAL);
    
-- EXAM098
CREATE SEQUENCE SEQ1
START WITH 1
INCREMENT BY 1
MAXVALUE 100
NOCYCLE;

-- EXAM099
SELECT *
    FROM EMP
    AS OF TIMESTAMP (SYSTIMESTAMP - INTERVAL '5' MINUTE)
    WHERE ENAME = 'KING';
     
-- EXAM100
ALTER TABLE EMP ENABLE ROW MOVEMENT;

FLASHBACK TABLE EMP TO  TIMESTAMP (SYSTIMESTAMP -  INTERVAL '5' MINUTE);

-- EXAM101
DROP TABLE EMP;
FLASHBACK TABLE EMP TO BEFORE DROP;

-- EXAM101-2
FLASHBACK TABLE EMP TO BEFORE DROP  RENAME TO EMP2;

-- EXAM102
SELECT ENAME, SAL, VERSIONS_STARTTIME, VERSIONS_ENDTIME, VERSIONS_OPERATION
    FROM EMP
    VERSIONS BETWEEN TIMESTAMP
        TO_TIMESTAMP('2019-06-30 08:20:00', 'RRRR-MM-DD HH24:MI:SS')
        AND MAXVALUE
WHERE ENAME = 'KING'
ORDER BY VERSIONS_STARTTIME;

-- EXAM103
DROP TABLE EMP;
SELECT UNDO_SQL
    FROM FLASHBACK_TRANSACTION_QUERY
    WHERE TABLE_OWNER = 'SCOTT' AND TABLE_NAME = 'EMP'
    AND COMMIT_SCN BETWEEN 9457390 AND 9457397
    ORDER BY START_TIMESTAMP DESC;
    
-- EXAM104
CREATE TABLE DEPT2
(DEPTNO     NUMBER(10) CONSTRAINT DPET2_DEPNO_PK PRIMARY KEY,
 DNAME      VARCHAR2(14),
 LOC        VARCHAR2(10));
 
-- EXAM104-2
CREATE TABLE DEPT2
(DEPTNO     NUMBER(10),
 DNAME      VARCHAR2(14),
 LOC        VARCHAR2(10));

ALTER TABLE DEPT2
    ADD CONSTRAINT DEPT2_DEPTNO_PK PRIMARY KEY(DEPTNO);
    
-- EXAM105
CREATE TABLE DEPT3
(DEPTNO     NUMBER(10),
 DNAME      VARCHAR2(14) CONSTRAINT DEPT3_DNAME_UN UNIQUE,
 LOC        VARCHAR2(10));
 
-- EXAM105-2
CREATE TABLE DEPT3
(DEPTNO     NUMBER(10),
 DNAME      VARCHAR2(13),
 LOC        VARCHAR2(10));

ALTER TABLE DEPT4
    ADD CONSTRAINT DEPT2_DNAME_UN UNIQUE(DNAME);
    
-- EXAM106
CREATE TABLE DEPT5
(DEPTNO     NUMBER(10),
 DNAME      VARCHAR2(14),
 LOC        VARCHAR2(10) CONSTRAINT DEPT5_LOC_NN NOT NULL);
 
-- EXAM106-2
CREATE TABLE DEPT6
(DEPTNO     NUMBER(10),
 DNAME      VARCHAR2(13),
 LOC        VARCHAR2(10));

ALTER TABLE DEPT4
    ADD CONSTRAINT DEPT6_LOC_NN NOT NULL; 
    
-- EXAM107
CREATE TABLE EMP6
( EMPNO     NUMBER(10),
  ENAME     VARCHAR2(20),
  SAL       NUMBER(10) CONSTRAINT EMP6_SAL_CK
  CHECK ( SAL BETWEEN 0 AND 6000 ) );
  
-- EXAM108
DROP TABLE DEPT7;
CREATE TABLE DEPT7
(DEPTNO   NUMBER(10) CONSTRAINT DEPT7_DEPTNO_PK PRIMARY KEY,
 DNAME  VARCHAR2(14),
 LOC    VARCHAR2(10));
 
CREATE TABLE EMP7
(EMPNO  NUMBER(10),
 ENAME  VARCHAR2(20),
 SAL    NUMBER(10),
 DEPTNO NUMBER(10) CONSTRAINT EMP7_DEPTNO_FK REFERENCES DEPT7(DEPTNO));


-- EXAM109
WITH JOB_SUMSAL AS (SELECT JOB, SUM(SAL) AS 토탈
                        FROM EMP
                        GROUP BY JOB)
    SELECT JOB, 토탈
        FROM jOB_SUMSAL
        WHERE 토탈 > (SELECT AVG(토탈)
                            FROM JOB_SUMSAL);
                            
-- EXAM109-2
SELECT JOB, SUM(SAL) AS 토탈
    FROM EMP
    GROUP BY JOB
    HAVING SUM(SAL) > (SELECT AVG(SUM(SAL))
                            FROM EMP
                            GROUP BY JOB);
                            
-- EXAM110
WITH JOB_SUMSAL AS (SELECT JOB, SUM(SAL) AS 토탈
                        FROM EMP
                        GROUP BY JOB) ,
        DEPTNO_SUMSAL AS (SELECT DEPTNO, SUM(SAL) 토탈
                                FROM EMP
                                GROUP BY DEPTNO
                                HAVING SUM(SAL) > (SELECT AVG(토탈) + 3000
                                                    FROM JOB_SUMSAL)
                        )
    SELECT DEPTNO, 토탈
        FROM DEPTNO_SUMSAL;
        
-- EXAM110-2
SELECT DEPTNO, SUM(SAL)
FROM (SELECT JOB, SUM(SAL) 토탈
                    FROM EMP
                    GROUP BY JOB) AS JOB_SUMSAL,
        (SELECT DEPTNO, SUM(SAL) 토탈
                        FROM EMP
                        GROUP BY DEPTNO
                    HAVING SUM(SAL) > (SELECT AVG(토탈) + 3000
                                                FROM JOB_SUMSAL)
                                ) DEPTNO_SUMSAL;
                                
-- EXAM111
WITH LOOP_TABLE AS (SELECT LEVEL AS NUM
                        FROM DUAL
                    CONNECT BY LEVEL <= 9)
    SELECT '2' || ' X ' || NUM || ' = ' || 2 * NUM AS "2단"
        FROM LOOP_TABLE;
        
-- EXAM111-2
SELECT LEVEL AS NUM
    FROM DUAL
    CONNECT BY LEVEL <= 9;
    
-- EXAM112
WITH LOOP_TABLE AS (SELECT LEVEL AS NUM
                            FROM DUAL
                            CONNECT BY LEVEL <= 9),
        GUGU_TABLE  AS (SELECT LEVEL + 1 AS GUGU
                                    FROM DUAL
                                    CONNECT BY LEVEL <= 8)
    SELECT TO_CHAR(A.NUM) || ' X ' || TO_CHAR(B.GUGU) || ' = ' ||
            TO_CHAR(B.GUGU * A.NUM) AS 구구단
    FROM LOOP_TABLE A, GUGU_TABLE B;

-- EXAM113 
WITH LOOP_TABLE AS (SELECT LEVEL AS NUM
                        FROM DUAL
                        CONNECT BY LEVEL <= 8)
    SELECT LPAD('*', NUM, '*') AS STAR
        FROM LOOP_TABLE;
        
-- EXAM113-2
SELECT LPAD('"', 10, '*') AS STAR
    FROM DUAL;

-- EXAM114
WITH LOOP_TABLE AS (SELECT LEVEL AS NUM
                        FROM DUAL
                        CONNECT BY LEVEL <= 8)
    SELECT LPAD(' ', 10-NUM, ' ') || LPAD('*', NUM, '*') AS "TRIANGLE"
        FROM LOOP_TABLE;
        
-- EXAM114-2
UNDIFINE 숫자1
UNDIFINE 숫자2

WITH LOOP_TABLE AS (SELECT LEVEL AS NUM
                        FROM DUAL
                        CONNECT BY LEVEL <= &숫자1)
    SELECT LPAD(' ', &숫자2-NUM, ' ') || LPAD('*', NUM, '*') AS "TRIANGLE"
        FROM LOOP_TABLE;
        
-- EXAM115
UNDEFINE P_NUM
ACCEPT P_NUM PROMPT '숫자 입력 : '

SELECT LPAD(' ', &P_NUM-LEVEL, ' ') || RPAD('*', LEVEL, '*') AS STAR
        FROM DUAL
        CONNECT BY LEVEL < &P_NUM+1
UNION ALL
SELECT LPAD(' ', LEVEL, ' ') || RPAD('*', (&P_NUM) - LEVEL, '*') AS STAR
        FROM DUAL
        CONNECT BY LEVEL < &P_NUM;
        
-- EXAM116
UNDEFINE P_N1
UNDEFINE P_N2
ACCEPT P_N1 PROMPT '가로 숫자를 입력하세요~';
ACCEPT P_N2 PROMPT '세로 숫자를 입력하세요~';

WITH LOOP_TABLE AS (SELECT LEVEL AS NUM
                        FROM DUAL
                        CONNECT BY LEVEL <= &P_N2)
SELECT LPAD('*', &P_N1, '*') AS STAR
    FROM LOOP_TABLE;
    
-- EXAM117
UNDEFINE P_N
ACCEPT P_N PROMPT '숫자에 대한 값 입력:~';

SELECT SUM(LEVEL) AS 합계
    FROM DUAL
    CONNECT BY LEVEL <= &P_N;
    
-- EXAM118
UNDEFINE P_N
ACCEPT P_N PROMPT '숫자에 대한 값 입력:~';

SELECT ROUND(EXP(SUM(LN(LEVEL)))) 곱
    FROM DUAL
    CONNECT BY LEVEL <= &P_N;
    
-- EXAM119
UNDEFINE P_N
ACCEPT P_N PROMPT '숫자에 대한 값 입력:~';

SELECT LISTAGG(LEVEL, ', ') AS 짝수
    FROM DUAL
    WHERE MOD(LEVEL, 2) = 0
    CONNECT BY LEVEL <= &P_N;

-- EXAM120
UNDEFINE P_N
ACCEPT P_N PROMPT '숫자에 대한 값 입력:~';

WITH LOOP_TABLE AS (SELECT LEVEL AS NUM
                        FROM DUAL
                        CONNECT BY LEVEL <= &P_N)
SELECT L1.NUM AS 소수
    FROM LOOP_TABLE L1, LOOP_TABLE L2
    WHERE MOD(L1.NUM, L2.NUM) = 0
    GROUP BY L1.NUM
    HAVING COUNT(L1.NUM) = 2;
    
-- EXAM120-2
WITH LOOP_TABLE AS (SELECT LEVEL AS NUM
                        FROM DUAL
                        CONNECT BY LEVEL <= 10)
SELECT L1.NUM, COUNT(L1.NUM)
    FROM LOOP_TABLE L1, LOOP_TABLE L2
    WHERE MOD(L1.NUM, L2.NUM) = 0
    GROUP BY L1.NUM;
    
-- EXAM121
ACCEPT P_N1 PROMPT ' 첫 번째 숫자를 입력하세요~';
ACCEPT P_N2 PROMPT ' 두 번째 숫자를 입력하세요~';

WITH NUM_D AS (SELECT &P_N1 AS NUM1, &P_N2 AS NUM2
                    FROM DUAL)
SELECT MAX(LEVEL) AS "최대 공약수"
    FROM NUM_D
    WHERE MOD(NUM1, LEVEL) = 0
      AND MOD(NUM2, LEVEL) = 0
    CONNECT BY LEVEL <= NUM2;
    
-- EXAM122
ACCEPT P_N1 PROMPT ' 첫 번째 숫자를 입력하세요~';
ACCEPT P_N2 PROMPT ' 두 번째 숫자를 입력하세요~';

WITH NUM_D AS (SELECT &P_N1 NUM1, &P_N2 NUM2
                    FROM DUAL)
SELECT NUM1, NUM2,
        (NUM1/MAX(LEVEL))*(NUM2/MAX(LEVEL))*MAX(LEVEL) AS "최소 공배수"
    FROM NUM_D
    WHERE MOD(NUM1, LEVEL) = 0
      AND MOD(NUM2, LEVEL) = 0
    CONNECT BY LEVEL = NUM2;
    
-- EXAM123
ACCEPT NUM1 PROMPT '밑변의 길이를 입력하세요~';
ACCEPT NUM2 PROMPT '높이를 입력하세요~';
ACCEPT NUM3 PROMPT '빗변의 길이를 입력하세요~';

SELECT CASE WHEN
        ( POWER(&NUM1, 2) + POWER(&NUM2, 2) ) = POWER(&NUM3, 2)
            THEN '직각삼각형이 맞습니다'
            ELSE '직각삼각형이 아닙니다' END AS "피타고라스의 정리"
    FROM DUAL;

-- EXAM124
SELECT SUM(CASE WHEN(POWER(NUM1, 2) + POWER(NUM2, 2)) <= 1 THEN 1
                    ELSE 0 END) / 100000 * 4 AS "원주율"
    FROM (
            SELECT DBMS_RANDOM.VALUE(0, 1) AS NUM1,
                   DBMS_RANDOM.VALUE(0, 1) AS NUM2
                FROM DUAL
            CONNECT BY LEVEL < 100000
        );

-- EXAM125
WITH LOOP_TABLE AS (SELECT LEVEL AS NUM FROM DUAL
                        CONNECT BY LEVEL <= 1000000
                    )
SELECT RESULT
        FROM (
            SELECT NUM, POWER((1 + 1/NUM), NUM) AS RESULT
                    FROM LOOP_TABLE
                )
        WHERE NUM = 1000000;
